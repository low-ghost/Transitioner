// Helper Functions

//==========================
// String Helper Funtions
//==========================

@function to-string($value) {
  @return inspect(#{$value});
}

// general string replace functionality! what's next, regex?
// also providing a fourth argument will prefix it to returned string
@function str-replace($string, $remove, $replace, $accumulator: "") {
  $pos: str-index($string, $remove);
  @if $remove == "" {
    @warn "no argument provided for $remove";
  } @else if $replace == $remove {
    @return $string;
  } @else if $pos {
    $accumulator: $accumulator + str-slice($string, 1, $pos - 1) + $replace;
    $part2: str-slice($string, $pos + str-length($remove));
    @return str-replace($part2, $remove, $replace, $accumulator);
  }
  @return $accumulator + $string;
}

@function str-remove($string, $list...) {
  @for $i from 1 through length($list) {
    $string: str-replace($string, to-string(nth($list, $i)), "");
  }
  @return $string;
}

@function rm-sp($string, $replace: ""){
  @return str-replace($string, " ", $replace);
}

// you could almost do this without the accumulator but the final append
// is important for a proper list
@function str-explode($string, $separator, $list: ()){
  $index: str-index($string, $separator);
  @if $index == null {
    @return append($list, $string);
  }
  $l: length($separator);
  $list: append($list, str-slice($string, 1, $index - $l));
  $remaining: str-slice($string, $l + $index);
  @return str-explode($remaining, $separator, $list);
}

//========================
// List Helper Functions
//========================

@function rm-last($list){
  @return set-nth($list, length($list), "");
}

@function get-last($list){
  @return nth($list, length($list))
}

//creates a string by removing commas and spaces from a list
@function flaten-list($list, $separator: ","){
  @return rm-sp(str-replace(to-string($list), $separator, ""));
};

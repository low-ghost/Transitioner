@import "helpers/functions"

//===================================================================
// Main Transitioner sass file. Organizes transitions by added class
//===================================================================

// changes "#main .fa" to "main-subclass-fa-transition", for instance
// b/c sass can't extend nested selectors
@function to-placeholder-name($value){
  @return str-replace(
            str-replace(
              rm-sp($value, '-'), '.', 'subclass-'), '#', 'subid-')
          + "-transition";
}

// drops a placeholder for given element and transition
@mixin placeholder-transition($name, $transition) {
  %#{$name} { transition: #{$transition}; }
}

@mixin transitioner($selector, $transition, $root: false, $properties-root: false) {
  $transition: to-string($transition);
  $selector: to-string($selector);
  @at-root {
    $placeholder: to-placeholder-name($selector);
    $s-for-transition: $selector;
    $s-for-properties: $selector + &;
    @if str-index($transition, extend) {
      $placeholder: to-placeholder-name(str-slice($transition, 8));
    } @else {
      @include placeholder-transition($placeholder, $transition);
    }
    @if $root {
      $s-for-transition: $root $selector;
    }
    @if $properties-root {
      $s-for-properties: $properties-root $selector + &;
    }
    #{$s-for-transition} { @extend %#{$placeholder}; }
    #{$s-for-properties} { @content; }
  }
}

@mixin from($root: "", $properties-root: "") {
  @at-root {
    $x: to-string(&);
    $prefix: $root + "-";
    @if $properties-root { 	 	
      $x: str-replace(to-string(&), $properties-root, "");
      $prefix: $root;
    }
    $added-class: "." + get-last(str-explode($x, "."));
    //placeholder for json use only
    %#{to-placeholder-name($prefix + str-remove($x, $added-class))}{
      @content;
    }
    #{$root str-remove($x, $added-class)} {
      @content;
    }
  }
}

@mixin to(){
  @at-root{
    #{&}{ @content; }
  }
}

@mixin executeTransitioner($transitions){
  @each $class in map-keys($transitions){
    $selector-map: map-get($transitions, $class);
    @each $selector in map-keys($selector-map){
      $rules-map: map-get($selector-map, $selector);
      @if list-contains(map-keys($rules-map), "extend") {
        $extend: map-get($rules-map, extend);
        $to-extend-rules-map: map-get($selector-map, $extend);
        $to-extend-properties: map-get($to-extend-rules-map, properties);
        
        @if map-has-key($rules-map, properties) != true {
         @if list-contains(map-keys($to-extend-properties), "from"){
           $from-placeholder: "%#{to-placeholder-name(map-get($to-extend-rules-map, root) + "-" + $extend)}";
            $to-extend-rules-map: map-merge($to-extend-rules-map, (properties: ( from:"@extend " + $from-placeholder, to: "@extend " + $extend + $class)));
          } @else {
            $obj: (properties: "@extend " + $extend + $class);
            $to-extend-rules-map: map-merge($to-extend-rules-map, $obj);
          }
        } 
        $rules-map: map-merge($to-extend-rules-map, $rules-map);
      }
      $properties: map-get($rules-map, properties);
      $root: map-get($rules-map, root);
      $properties-root: map-get($rules-map, properties-root);
      $css-transition: build-transition-string($rules-map);
      #{$class} { 
        @include transitioner($selector, $css-transition, $root, $properties-root){
          @if type-of($properties) == string {
            @include string-to-css($properties);
          } @else {
            $from: map-get($properties, from);
            @include from($root, $properties-root){
              @include string-to-css($from);
            }
            $to: map-get($properties, to);
            @include to(){
              @include string-to-css($to);
            }
          }
        }
      }
    }
  }
}
